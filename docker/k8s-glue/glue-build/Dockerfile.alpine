# Use an Alpine-based Python image
ARG TAG=3.11.0-alpine3.17

FROM python:${TAG} as build

# Install build dependencies
RUN apk add --no-cache gcc musl-dev libffi-dev

# Copy the entire repository into the build stage.
# (Ensure you run "docker build" from the repository root.)
COPY . /clearml-agent

# Install the local clearml-agent package from the repository,
# along with a specific version constraint for cryptography.
RUN python3 -m pip install --prefix=/install --no-cache-dir -U /clearml-agent "cryptography>=2.9"

FROM python:${TAG} as target

WORKDIR /app

ARG KUBECTL_VERSION=1.29.3

# Set locale and Python I/O environment variables
ENV LC_ALL=en_US.UTF-8
ENV LANG=en_US.UTF-8
ENV LANGUAGE=en_US.UTF-8
ENV PYTHONIOENCODING=UTF-8

# Copy installed packages from the build stage into the final image
COPY --from=build /install /usr/local

# Download and install kubectl
ADD https://storage.googleapis.com/kubernetes-release/release/v${KUBECTL_VERSION}/bin/linux/amd64/kubectl /usr/bin/
RUN chmod +x /usr/bin/kubectl

# Install bash and create a .bashrc file for root
RUN apk add --no-cache bash && \
    touch /root/.bashrc

# Copy runtime files from the repository.
# Adjust the source paths if these files are not in the repository root.
COPY docker/k8s-glue/build-resources/k8s_glue_example.py /app/k8s_glue_example.py
COPY docker/k8s-glue/build-resources/entrypoint.sh /root/entrypoint.sh
COPY docker/k8s-glue/build-resources/setup.sh /root/setup.sh
COPY docker/k8s-glue/build-resources/clearml.conf /root/clearml.conf

# Ensure the entrypoint script is executable
RUN chmod +x /root/entrypoint.sh

# Set the entrypoint script as the default command
ENTRYPOINT ["/root/entrypoint.sh"]